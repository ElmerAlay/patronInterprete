/**
 * @author Elmer Alay
 * @version 6.0
 * @since   05-12-2018
*/

package com.compi2.usac.analizadores; 

import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;

parser code 
{:
    Map<String, Object> symbolTable = new HashMap<String,Object>();

    // Método al que se llama automáticamente ante algún error sintactico.
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    }
 
    // Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:} 

//Terminales que no se van a utilizar de momento
terminal plus, minus, mult, div, lt, gt, lte, gte, eq, neq;
terminal bracket_o, bracket_c, par_o, par_c;

terminal String number, id;
terminal var, semicolon, asign, println;

non terminal INICIO, SENTENCIAS, SENTENCIA, VALOR;
non terminal VAR_DEC, VAR_ASIGN, PRINTLN, EXPRESION;

precedence left plus, minus;
precedence left mult, div;

start with INICIO; 

INICIO  ::= SENTENCIAS 
            {:            
                System.out.println("Cadena Reconocida!!!");
            :}
;

SENTENCIAS  ::= SENTENCIAS SENTENCIA
            |   SENTENCIA
;

SENTENCIA   ::= VAR_DEC
            |   VAR_ASIGN
            |   PRINTLN
;

VAR_DEC ::= var id:n1 semicolon
            {:
                System.out.println("Declaración de variable");
                symbolTable.put(n1, 0);
            :}
;

VAR_ASIGN   ::= id:n1 asign EXPRESION:n2 semicolon
                {:
                    System.out.println("Asignación de variable");
                    symbolTable.put(n1, n2);
                :}
;

PRINTLN ::= println EXPRESION:n1 semicolon
            {:
                System.out.println(n1);
            :}
;

EXPRESION   ::= EXPRESION:n1 plus EXPRESION:n2
                {:
                    RESULT = Integer.parseInt(n1.toString()) + Integer.parseInt(n2.toString()); 
                :}
            |   EXPRESION:n1 minus EXPRESION:n2
                {:
                    RESULT = Integer.parseInt(n1.toString()) - Integer.parseInt(n2.toString()); 
                :}
            |   EXPRESION:n1 mult EXPRESION:n2
                {:
                    RESULT = Integer.parseInt(n1.toString()) * Integer.parseInt(n2.toString()); 
                :}
            |   EXPRESION:n1 div EXPRESION:n2
                {:
                    RESULT = Integer.parseInt(n1.toString()) / Integer.parseInt(n2.toString()); 
                :}
            |   VALOR:n1
                {:
                    RESULT = n1; 
                :}
;

VALOR   ::= par_o EXPRESION:n1 par_c
            {:
                RESULT = n1;
            :}
        |   number:n1
            {:
                RESULT = Integer.parseInt(n1);
            :}
        |   id:n1
            {:
                RESULT = symbolTable.get(n1); 
            :}
;